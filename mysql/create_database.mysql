DROP DATABASE IF EXISTS picnit;
CREATE DATABASE picnit;
USE picnit;

CREATE TABLE members (
	member_id	INT UNSIGNED	NOT NULL AUTO_INCREMENT,
	is_admin	BOOL		NOT NULL,
	is_suspended	BOOL		NOT NULL,
	username	VARCHAR(15)	NOT NULL,
	password	CHAR(40)	NOT NULL,
	salt		INT UNSIGNED	NOT NULL,
	email		VARCHAR(31)	NOT NULL,
	PRIMARY KEY (member_id),
	UNIQUE KEY (username),
	UNIQUE KEY (email)
);

CREATE TABLE albums (
	album_id	INT UNSIGNED	NOT NULL AUTO_INCREMENT,
	owner_id	INT UNSIGNED	NOT NULL,
	date_created	DATE		NOT NULL,
	name		VARCHAR(63)	NOT NULL,
	description	TEXT		NOT NULL,
	PRIMARY KEY (album_id),
	FOREIGN KEY (owner_id) REFERENCES members (member_id) ON DELETE CASCADE,
	FULLTEXT (name,description)
);

CREATE TABLE images (
	image_id	INT UNSIGNED    NOT NULL AUTO_INCREMENT,
	album_id	INT UNSIGNED    NOT NULL,
	owner_id	INT UNSIGNED	NOT NULL,
	publicness	TINYINT		NOT NULL,
	filepath	CHAR(32)	NOT NULL,
	date_added      DATE		NOT NULL,
	name		VARCHAR(63)	NOT NULL,
	description	TEXT		NOT NULL,
	imgtype		VARCHAR(31)	NOT NULL,
	PRIMARY KEY (image_id),
	FOREIGN KEY (album_id) REFERENCES albums (album_id) ON DELETE CASCADE,
	FULLTEXT (name,description)
);

CREATE TABLE comments (
	comment_id	INT UNSIGNED	NOT NULL AUTO_INCREMENT,
	commenter_id	INT UNSIGNED	NOT NULL,
	image_id	INT UNSIGNED	NOT NULL,
	comment_text	TEXT		NOT NULL,
	PRIMARY KEY (comment_id),
	FOREIGN KEY (commenter_id) REFERENCES members (member_id) ON DELETE CASCADE,
	FOREIGN KEY (image_id) REFERENCES images (image_id) ON DELETE CASCADE
);

CREATE TABLE mem_tags (
	member_id	INT UNSIGNED	NOT NULL,
	image_id	INT UNSIGNED	NOT NULL,
	date_tagged	DATE		NOT NULL,
	FOREIGN KEY (member_id) REFERENCES members (member_id) ON DELETE CASCADE,
	FOREIGN KEY (image_id) REFERENCES images (image_id) ON DELETE CASCADE,
	PRIMARY KEY (member_id, image_id)
);

CREATE TABLE favorites (
	member_id	INT UNSIGNED	NOT NULL,
	image_id	INT UNSIGNED	NOT NULL,
	FOREIGN KEY (member_id) REFERENCES members (member_id) ON DELETE CASCADE,
	FOREIGN KEY (image_id) REFERENCES images (image_id) ON DELETE CASCADE,
	PRIMARY KEY (member_id, image_id)
);

CREATE TABLE categories (
	category_id	INT UNSIGNED	NOT NULL AUTO_INCREMENT,
	category	VARCHAR(63)	NOT NULL,
	UNIQUE KEY (category),
	PRIMARY KEY (category_id),
	FULLTEXT (category)
);

CREATE TABLE category_tags (
	category_id	INT UNSIGNED	NOT NULL,
	image_id	INT UNSIGNED	NOT NULL,
	FOREIGN KEY (category_id) REFERENCES categories (category_id) ON DELETE CASCADE,
	FOREIGN KEY (image_id) REFERENCES images (image_id) ON DELETE CASCADE,
	PRIMARY KEY (category_id, image_id)
);

CREATE TABLE follows (
	follower_id	INT UNSIGNED	NOT NULL,
	followee_id	INT UNSIGNED	NOT NULL,
	FOREIGN KEY (follower_id) REFERENCES members (member_id) ON DELETE CASCADE,
	FOREIGN KEY (followee_id) REFERENCES members (member_id) ON DELETE CASCADE,
	PRIMARY KEY (follower_id, followee_id)
);

CREATE TABLE messages (
	message_id	INT UNSIGNED	NOT NULL AUTO_INCREMENT,
	from_id		INT UNSIGNED	NOT NULL,
	to_id		INT UNSIGNED	NOT NULL,
	message_type	TINYINT		NOT NULL,
	is_read		BOOL		NOT NULL,
	message		TEXT		NOT NULL,
	FOREIGN KEY (from_id) REFERENCES members (member_id) ON DELETE CASCADE,
	FOREIGN KEY (to_id) REFERENCES members (member_id) ON DELETE CASCADE,
	PRIMARY KEY (message_id)
);
